@{
    ViewBag.Title = "Home Page";
}

<div class="jumbotron">
    <h1><i>this</i></h1>
    <p>Questions for identifying the value of the JavaScript <i>this</i> keyword.</p>
</div>

<h2>When <i>this</i> is used inside a function</h2>

<pre>
var read = function() {
    console.log('Reading ' + this.title + ' by ' + this.author);
}
</pre>

<h2>How is the function being invoked?</h2>

<div class="row">

    <div class="col-sm-6">
        <div class="panel panel-default">
            <div class="panel-body">
                <h3>1. As a function?</h3>
<pre>
  
read();

</pre>
                <p>this === window </p>
                <a href="demo/asAFunction">Example</a>
            </div>
        </div>
    </div>

    <div class="col-sm-6">
        <div class="panel panel-default">
            <div class="panel-body">
                <h3>2. As a function in strict mode?</h3>
<pre>
"strict mode";

read();
</pre>
                <p>this === undefined </p>
                <a href="demo/asAFunctionInStrictMode">Example</a>
            </div>
        </div>
    </div>


    <div class="col-sm-6">
        <div class="panel panel-default">
            <div class="panel-body">
                <h3>3. As a method?</h3>
<pre>

book.read();

</pre>
                <p>this === book </p>
                <a href="demo/asAMethod">Example</a>
            </div>
        </div>
    </div>

    <div class="col-sm-6">
        <div class="panel panel-default">
            <div class="panel-body">
                <h3>4. As a constructor?</h3>
                <pre>

var book = new Book();

</pre>
                <p>(this instanceof Book) === true </p>
                <a href="demo/asAConstructor">Example</a>
            </div>
        </div>
    </div>


    <div class="col-sm-6">
        <div class="panel panel-default">
            <div class="panel-body">
                <h3>5. With call?</h3>
<pre>

read.call(thisArg, theHeroOfAges);



</pre>
                <p>this === thisArg</p>
                <a href="demo/withCall">Example</a>
            </div>
        </div>
    </div>

    <div class="col-sm-6">
        <div class="panel panel-default">
            <div class="panel-body">
                <h3>6. With apply?</h3>
                <pre>
read.apply(thisArg, [
    mistBorn, 
    theWellOfAssension,
    theHeroOfAges
]);
</pre>
                <p>this === thisArg</p>
                <a href="demo/withApply">Example</a>
            </div>
        </div>
    </div>

    <div class="col-sm-6">
        <div class="panel panel-default">
            <div class="panel-body">
                <h3>7. Forcing the value of <i>this</i> with bind?</h3>
<pre>
var bound = read.bind(thisArg);
bound();

</pre>
                <p>this === thisArg</p>
                <a href="demo/bind">Example</a>
            </div>
        </div>
    </div>

    <div class="col-sm-6">
        <div class="panel panel-default">
            <div class="panel-body">
                <h3>8. As a callback function?</h3>
<pre>
$.get('api/value/1', function(data){
    this.parseData(data);
});
</pre>
                <p>The value of this depends on how the funtion is invoked.</p>
                <a href="demo/asACallback">Example</a>
            </div>
        </div>
    </div>

</div>


<h2>When this is used outside a function</h2>
<div class="row">
    <div class="col-sm-6">
        <div class="panel panel-default">
            <div class="panel-body">
                <h3>9. Top-level JavaScript?</h3>
<pre>

this.Math

</pre>
                <p>this === window </p>
                <a href="demo/topLevel">Example</a>
            </div>
        </div>
    </div>
</div>


